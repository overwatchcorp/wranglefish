{"version":3,"sources":["components/Parser.jsx","components/RVector.jsx","components/RMatrix.jsx","reducers/textInput.js","actions/index.js","reducers/parsers.js","reducers/index.js","store/index.js","components/TextInput.jsx","App.jsx","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_redux__WEBPACK_IMPORTED_MODULE_1__","_RVector__WEBPACK_IMPORTED_MODULE_2__","_RMatrix__WEBPACK_IMPORTED_MODULE_3__","parsedData","ParserComponent","state","parsers","map","parser","name","func","outputType","output","textInput","text","_eval","eval","data","warning","length","a","createElement","array","matrix","JSON","stringify","key","style","borderBottom","marginBottom","paddingBottom","fontFamily","className","type","data-toggle","data-target","aria-expanded","aria-controls","id","mapStateToProps","_ref","Parser","connect","RVector","props","v","i","concat","value","defaultProps","RMatrix","ncol","vector","arr","arguments","undefined","action","Object","assign","indexReducer","combineReducers","store","createStore","applyMiddleware","logger","TextInput","_ref2","dispatch","updateTextInput","event","target","react_default","autoFocus","onChange","rows","placeholder","App","es","fontSize","textAlign","components_TextInput","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.389c891c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport RVector from './RVector';\nimport RMatrix from './RMatrix';\n\nconst parsedData = {};\n\nconst ParserComponent = state => state.parsers.parsers.map((parser) => {\n  const { name, func, output: outputType } = parser;\n  const { textInput } = state;\n  const { text } = textInput;\n  if (text) {\n    const { data, warning } = eval(func)(text, parsedData);\n    parsedData[name] = data;\n    let output;\n    switch (outputType) {\n      case ('vector'): {\n        if (data.length > 0) {\n          output = (\n            <div>\n              {warning}\n              <RVector array={data} name={name} />\n            </div>\n          );\n        } else {\n          output = 'No results';\n        }\n        break;\n      }\n      case ('matrix'): {\n        if (data[0]) {\n          output = (\n            <div>\n              <b>{warning}</b>\n              <RMatrix matrix={data} name={name} />\n            </div>\n          );\n        } else {\n          output = 'No results';\n        }\n        break;\n      }\n      default: {\n        output = <div>{JSON.stringify(data)}</div>;\n      }\n    }\n    return (\n      <div\n        key={name}\n        style={{\n          borderBottom: '1px dashed gray',\n          marginBottom: '1rem',\n          paddingBottom: '1rem',\n        }}\n      >\n        <h6>\n          <span style={{ fontFamily: 'Courier' }}>\n            filter name:&nbsp;\n            { name }\n          </span>\n        </h6>\n        <button className=\"btn btn-outline-secondary\" type=\"button\" data-toggle=\"collapse\" data-target={'#' + name + 'collapse'} aria-expanded=\"false\" aria-controls={name + 'collapse'}>\n          show parser code\n        </button>\n        <div className=\"collapse\" id={name + 'collapse'}>\n          <pre><code>{ func }</code></pre>\n        </div>\n        <h6 className=\"mt-1\">\n          <span style={{ fontFamily: 'Courier' }}>output</span>\n        </h6>\n        <code>\n          { output }\n        </code>\n      </div>\n    );\n  } else {\n    return <div><code>{name}</code> waiting for data.</div>;\n  }\n});\n\nParserComponent.propTypes = () => ({\n  parsers: PropTypes.arrayOf({\n    name: PropTypes.func.isRequired,\n    func: PropTypes.string.isRequired,\n  }),\n});\n\nconst mapStateToProps = ({ textInput, parsers }) => ({\n  textInput,\n  parsers,\n});\n\nconst Parser = connect(mapStateToProps)(ParserComponent);\n\nexport default Parser;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst RVector = (props) => {\n  const { array, name } = props;\n  return (\n    <code>\n      {name}\n      &nbsp;&lt;-\n      c(\n      {\n        array.map((v, i) => `${JSON.stringify(v.value)}${(array[i + 1]) ? ', ' : ''}`)\n      }\n      );\n    </code>\n  )\n}\n\nRVector.propTypes = () => ({\n  array: PropTypes.array,\n  name: PropTypes.string,\n});\n\nRVector.defaultProps = () => ({\n  name: 'No name!!!',\n  array: [],\n});\n\nexport default RVector;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// what this component is supposed to produce\n// m <- matrix(c(NA,2,30,6,19,122,0,NA,18,\n// 0,19,85,0,1,NA,3,8,84,0,0,0,NA,267,50,0,\n// 0,0,5,NA,10,1,0,4,4,1,NA), ncol=6)\nconst RMatrix = ({ matrix, name }) => {\n  const ncol = matrix[0].length;\n  let vector = [];\n  matrix.map(arr => (vector = vector.concat(arr)));\n  const output = `${name} <- matrix(c(${vector}), ncol=${ncol})`\n  return (\n    <div>\n      { output }\n    </div>\n  );\n};\n\nRMatrix.propTypes = () => ({\n  matrix: PropTypes.arrayOf(PropTypes.int).isRequired,\n  name: PropTypes.string.isRequired,\n});\n\nexport default RMatrix;\n","import { UPDATE_TEXT_INPUT } from '../actions';\nimport demoData from './demoData';\n\nconst textInput = (state = { text: '' }, action) => {\n  switch (action.type) {\n    case (UPDATE_TEXT_INPUT): {\n      const { text } = action;\n      const newState = Object.assign({}, state, {\n        text,\n      });\n      return newState;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default textInput;\n","export const UPDATE_TEXT_INPUT = 'UPDATE_TEXT_INPUT';\n\nexport const updateTextInput = text => ({\n  type: UPDATE_TEXT_INPUT,\n  text,\n});\n\nexport const UPDATE_PARSER_ALGORITM = 'UPDATE_PARSER_ALGORITM';\n\nexport const updateParserAlgorithm = algorithm => ({\n  type: UPDATE_PARSER_ALGORITM,\n  algorithm,\n});\n","// import { UPDATE_PARSER_ALGORITHM } from '../actions';\n\nconst parsers = (state = {\n  parsers: [\n    {\n      name: 'metadata',\n      output: 'vector',\n      func: `\n        (textInput) => {\n          const regex = /Answer.([0-9])=(.+)/g;\n          const output = [];\n          do {\n            const data = regex.exec(textInput);\n            if (data) {\n              output.push({\n                question: data[1], \n                value: data[2],\n              });\n            }\n          } while (regex.lastIndex);\n          return { data: output };\n        }\n      `,\n    },\n    {\n      name: 'data',\n      output: 'matrix',\n      func: `\n        (textInput, { metadata }) => {\n          console.log(metadata);\n          const regex = /[0-9]+, ([a-z])\\\\n[0-9]+, ([a-z])\\\\n[0-9]+, ([a-z])/g;\n          let warning = null;\n          const interactions = [];\n          do {\n            const data = regex.exec(textInput);\n            if (data) {\n              interactions.push({\n                fish1: data[1], \n                action: data[2],\n                fish2: data[3],\n              });\n            }\n          } while (regex.lastIndex);\n\n          const getFishKeys = () => {\n            const fish = [];\n            interactions.map(i => {\n              // if fishX isn't in array, push name to array\n              if(fish.indexOf(i.fish1) === -1) fish.push(i.fish1)\n              if(fish.indexOf(i.fish2) === -1) fish.push(i.fish2)\n            });\n            // return alphanetically sorted array of fish\n            return fish.sort();\n          }\n\n          const fish = getFishKeys();\n          // check to see that fish count match matrix dimensions\n          // if a fish doesn't interact with any other fish, the matrix may be too small\n          if (metadata[4]) {\n            if (parseInt(metadata[4].value) != fish.length) warning = \"Warning! The parser did not find a number of fish equal to the number recorded in the metadata. Metadata reported \" + metadata[4].value + \" fish while the parser found \" + fish.length + \" fish.\"\n          }\n\n          const interactionMatrix = fish.map(thisFish => {\n            return fish.map(otherFish => {\n               let totalInteractionsInitiatedByThisFish = 0;\n               interactions.map(i => {\n                 if (i.fish1 === thisFish && i.fish2 === otherFish) {\n                   totalInteractionsInitiatedByThisFish += 1;\n                 }\n               })\n               return totalInteractionsInitiatedByThisFish;\n            })\n          })\n\n          return({ data: interactionMatrix, warning });\n        }\n      `,\n    },\n  ],\n}, action) => {\n  switch (action.type) {\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default parsers;\n","import { combineReducers } from 'redux';\nimport textInput from './textInput';\nimport parsers from './parsers';\n\nconst indexReducer = combineReducers({\n  textInput,\n  parsers,\n});\n\nexport default indexReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport logger from 'redux-logger';\nimport indexReducer from '../reducers';\n\nconst store = createStore(indexReducer, applyMiddleware(logger));\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { updateTextInput as updateTextInputAction } from '../actions';\n\nconst TextInputComponent = ({ textInput, updateTextInput }) => (\n  <div>\n    <div className=\"form-group\">\n      <textarea\n        autoFocus\n        value={textInput.text}\n        onChange={updateTextInput}\n        rows=\"5\"\n        placeholder=\"Paste data here\"\n        className=\"form-control\"\n      />\n    </div>\n  </div>\n);\n\nTextInputComponent.propTypes = () => ({\n  textInput: {\n    text: PropTypes.string.isRequired,\n  },\n});\n\nconst mapStateToProps = ({ textInput }) => ({\n  textInput,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateTextInput: event => dispatch(updateTextInputAction(event.target.value)),\n});\n\nconst TextInput = connect(mapStateToProps, mapDispatchToProps)(TextInputComponent);\n\nexport default TextInput;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport TextInput from './components/TextInput';\nimport Parser from './components/Parser';\n\nconst App = () => (\n  <Provider store={store}>\n    <div className=\"container mt-2 mb-2\">\n      <h1 style={{ fontSize: '1.5rem', textAlign: 'center' }}>fish data parser</h1>\n      <h6>Input</h6>\n      <TextInput />\n      <h6>Output</h6>\n      <div className=\"card container pt-2 pb-2\">\n        <Parser />\n      </div>\n      <small className=\"float-right text-right\">\n        Made in the mLab at Reed College in 2018.\n        <br />\n        Questions? Email&nbsp;\n        <a href=\"mailto:fungj@reed.edu?subject=Fish data parser\">fungj@reed.edu</a>\n        .\n      </small>\n    </div>\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}